import { useState, useEffect } from "react";
import { notification } from 'antd';
import { IoIosCloseCircleOutline } from "react-icons/io";
import { v4 as uuid } from "uuid";
import { collection, addDoc, deleteDoc, onSnapshot, updateDoc, doc } from "firebase/firestore";
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { db } from "../firebase";

function Dashboard() {
  const [box, setBox] = useState([]);
  const [title, setTitle] = useState('');
  const [des, setDes] = useState('');
  const [img, setImg] = useState(null);
  const [imgUrl, setImgUrl] = useState('');
  const [id, setId] = useState('');
  const [montaj, setMontaj] = useState('');
  const [firstData, setFirstData] = useState('');
  const [bekzod, setBekzod] = useState('');
  const [siroj, setSiroj] = useState('');
  const [murod, setMurod] = useState('');

  const [zafar, setZafar] = useState('');
  const [abror, setAbror] = useState('');
  const [vohid, setVohid] = useState('');
  const [otabek, setOtabek] = useState('');
  const [asror, setAsror] = useState('');
  const [atham, setAtham] = useState('');
  const [elyor, setElyor] = useState('');

  const [showForm, setShowForm] = useState(false);
  const [showMontaj, setShowMontaj] = useState(false);
  const [isUpdate, setIsUpdate] = useState(false);
  const [bekzodChecked, setBekzodChecked] = useState(false);
  const [sirojChecked, setSirojChecked] = useState(false);
  const [murodChecked, setMurodChecked] = useState(false);
  const [zafarChecked, setZafarChecked] = useState(false);
  const [abrorChecked, setAbrorChecked] = useState(false);
  const [vohidChecked, setVohidChecked] = useState(false);
  const [otabekChecked, setOtabekChecked] = useState(false);
  const [asrorChecked, setAsrorChecked] = useState(false);
  const [athamChecked, setAthamChecked] = useState(false);
  const [elyorChecked, setElyorChecked] = useState(false);

  const data = collection(db, 'blogs');
  const storage = getStorage();

  useEffect(() => {
    const unsubscribe = onSnapshot(data, (snapshot) => {
      const malumot = snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }));
      setBox(malumot);
    });

    return () => unsubscribe();
  }, []);

  const handleCreate = async (e) => {
    e.preventDefault();
    if (title === "" || des === "" || img === null || montaj === "" || firstData === "" || bekzodChecked === "" || sirojChecked === "" || murodChecked === "") {
      return notification.error({
        message: "Input bo'sh",
        description: "Malumot to'liq kiritilmagan"
      });
    }

    try {
      const imgRef = ref(storage, `images/${img.name}-${uuid()}`);
      const uploadTask = uploadBytesResumable(imgRef, img);

      uploadTask.on('state_changed',
        (snapshot) => { },
        (error) => {
          notification.error({
            message: "Rasm yuklanmadi",
            description: error.message
          });
        },
        () => {
          getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {
            const bekzodName = bekzodChecked ? 'Bekzod' : '';
            const sirojName = sirojChecked ? 'Siroj' : '';
            const murodName = murodChecked ? 'Murod' : '';
            const zafarName = zafarChecked ? 'Zafar' : '';
            const abrorName = abrorChecked ? 'Abror' : '';
            const vohidName = vohidChecked ? 'Vohid' : '';
            const otabekName = otabekChecked ? 'Otabek' : '';
            const asrorName = asrorChecked ? 'Asror' : '';
            const athamName = athamChecked ? 'Atham' : '';
            const elyorName = elyorChecked ? 'Elyor' : '';



            await addDoc(data, {
              title,
              descript: des,
              img: downloadURL,
              id: uuid(),
              montaj,
              firstData,
              bekzod: bekzodName,
              siroj: sirojName,
              murod: murodName,
              zafar: zafarName,
              abror: abrorName,
              vohid: vohidName,
              otabek: otabekName,
              asror: asrorName,
              atham: athamName,
              elyor: elyorName,

            });
            notification.success({
              message: "Ma'lumot kiritildi",
              description: "Sizning barcha ma'lumotlaringiz kiritildi"
            });
            setShowForm(false);
            resetForm();
          });
        }
      );
    } catch (error) {
      console.error("Error uploading image:", error);
      notification.error({
        message: "Rasm yuklanmadi",
        description: error.message
      });
    }
  };

  const handleDelete = async (id) => {
    const deletePost = doc(db, 'blogs', id);
    await deleteDoc(deletePost);
    console.log(`Deleted post with id: ${id}`);
  };

  const handleEdit = (id, title, descript, img, montaj, firstData, bekzod, siroj, murod) => {
    setId(id);
    setTitle(title);
    setDes(descript);
    setImgUrl(img);
    setMontaj(montaj);
    setFirstData(firstData);
    setBekzod(bekzod);
    setSiroj(siroj);
    setMurod(murod)
    setBekzodChecked(bekzod === 'Bekzod');
    setSirojChecked(siroj === 'Siroj');
    setMurodChecked(murod === 'Murod');
    setZafarChecked(zafar === 'Zafar');
    setAbrorChecked(abror === 'Abror');
    setVohidChecked(vohid === 'Vohid');
    setOtabekChecked(otabek === 'Otabek');
    setAsrorChecked(asror === 'Asror');
    setAthamChecked(atham === 'Atham');
    setElyorChecked(elyor === 'Elyor');
    setIsUpdate(true);
    setShowForm(true);
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    const updateData = doc(db, 'blogs', id);
    const bekzodName = bekzodChecked ? 'Bekzod' : '';
    const sirojName = sirojChecked ? 'Siroj' : '';
    const murodName = murodChecked ? 'Murod' : '';
    const zafarName = zafarChecked ? 'Zafar' : '';
    const abrorName = abrorChecked ? 'Abror' : '';
    const vohidName = vohidChecked ? 'Vohid' : '';
    const otabekName = otabekChecked ? 'Otabek' : '';
    const asrorName = asrorChecked ? 'Asror' : '';
    const athamName = athamChecked ? 'Atham' : '';
    const elyorName = elyorChecked ? 'Elyor' : '';


    await updateDoc(updateData, {
      title,
      descript: des,
      img: imgUrl,
      montaj,
      firstData,
      bekzod: bekzodName,
      siroj: sirojName,
      murod: murodName,
      zafar: zafarName,
      abror: abrorName,
      vohid: vohidName,
      otabek: otabekName,
      asror: asrorName,
      atham: athamName,
      elyor: elyorName,
    });
    setShowForm(false);
    setIsUpdate(false);
    resetForm();
  };

  const handleMontaj = async (e) => {
    e.preventDefault();
    try {
      await addDoc(collection(db, 'montaj'), {
        bekzod,
        siroj,
        murod,
        zafar,
        abror,
        vohid,
        otabek,
        asror,
        atham,
        elyor
      });
      notification.success({
        message: "Montaj muvaffaqiyatli yuborildi",
        description: "Succes"
      });
      setShowMontaj(false);
    } catch (error) {
      console.error("Error sending montaj data:", error);
      notification.error({
        message: "Xatolik",
        description: "Montaj ma'lumotlarini yuborishda xatolik yuz berdi"
      });
    }
  };

  const resetForm = () => {
    setTitle("");
    setDes("");
    setImg(null);
    setImgUrl('');
    setMontaj("");
    setFirstData("");
    setBekzod("");
    setSiroj("");
    setMurod("");

    setZafar("");
    setAbror("");
    setVohid("");
    setOtabek("");
    setAsror("");
    setAtham("");
    setElyor("");
    setShowForm(false);
    setBekzodChecked(false);
    setSirojChecked(false);
    setMurodChecked(false);

  };

  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      setImg(e.target.files[0]);
    }
  };

  const handleBekzodChange = (e) => {
    setBekzodChecked(e.target.checked);
  };

  const handleSirojChange = (e) => {
    setSirojChecked(e.target.checked);
  };

  const handleMurodChange = (e) => {
    setMurodChecked(e.target.checked);
  };

  const handleZafarChange = (e) => {
    setZafarChecked(e.target.checked);
  };

  const handleAbrorChange = (e) => {
    setAbrorChecked(e.target.checked);
  };

  const handleVohidChange = (e) => {
    setVohidChecked(e.target.checked);
  };

  const handleOtabekChange = (e) => {
    setOtabekChecked(e.target.checked);
  };

  const handleAsrorChange = (e) => {
    setAsrorChecked(e.target.checked);
  };

  const handleAthamChange = (e) => {
    setAthamChecked(e.target.checked);
  };
  const handleElyorChange = (e) => {
    setElyorChecked(e.target.checked);
  };


  return (
    <>
      <div>
        <button className="flex m-auto border w-[100px] h-[40px] items-center justify-center mt-[15px]" onClick={() => setShowForm(true)}>
          Add Data
        </button>
        {/* Create Data */}
        {showForm && (
          <div className="overflow-hidden mt-10 p-4 border w-full h-full border-gray-300 rounded-md fixed top-0 left-0 right-0 backdrop-blur-[100px]">
            <button onClick={() => setShowForm(false)} className="text-[30px] absolute top-[20px] left-[95%]">
              <IoIosCloseCircleOutline />
            </button>
            <h2 className="text-2xl mb-4 font-[700]">Create New Post</h2>
            <form onSubmit={isUpdate ? handleUpdate : handleCreate}>
              <div>
                <label htmlFor="date">
                  <h1 className="mb-[10px]">Vaqtni kiriting</h1>
                  <input
                    id="date"
                    type="date"
                    className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                    value={firstData}
                    onChange={(e) => setFirstData(e.target.value)}
                  />
                </label>
                <input
                  type="text"
                  placeholder="To'y Xona"
                  className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                />
                <textarea
                  placeholder="To'y xaqida ma'lumotlar"
                  className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                  value={des}
                  onChange={(e) => setDes(e.target.value)}
                />
                <input
                  type="file"
                  className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                  onChange={handleFileChange}
                />
                <h1 className="text-black text-[20px] mb-[10px]">Montaj qilinganmi?</h1>
                <div className="flex mb-[15px]">
                  <label htmlFor="ha" className="flex text-black">
                    Bajarildi
                    <input
                      type="radio"
                      id="ha"
                      name="montaj"
                      value="Bajarildi"
                      checked={montaj === 'Bajarildi'}
                      onChange={(e) => setMontaj(e.target.value)}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="yo'q" className="ml-5 flex text-black">
                    Bajartilmadi
                    <input
                      type="radio"
                      id="yo'q"
                      name="montaj"
                      value="Bajartilmadi"
                      checked={montaj === 'Bajartilmadi'}
                      onChange={(e) => setMontaj(e.target.value)}
                      className="ml-2"
                    />
                  </label>
                </div>
                <div className="flex mb-[15px]">
                  <label htmlFor="bekzod" className="flex text-black">
                    Bekzod
                    <input
                      type="checkbox"
                      id="bekzod"
                      name="bekzod"
                      checked={bekzodChecked}
                      onChange={handleBekzodChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="siroj" className="ml-5 flex text-black">
                    Siroj
                    <input
                      type="checkbox"
                      id="siroj"
                      name="siroj"
                      checked={sirojChecked}
                      onChange={handleSirojChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="murod" className="ml-5 flex text-black">
                    Murod
                    <input
                      type="checkbox"
                      id="murod"
                      name="murod"
                      checked={murodChecked}
                      onChange={handleMurodChange}
                      className="ml-2"
                    />
                  </label>
                </div>
                <h1 className="text-black text-[20px] mb-[10px]">Video Operator</h1>
                <div className="flex mb-[15px]">
                  <label htmlFor="zafar" className="flex text-black">
                    Zafar
                    <input
                      type="checkbox"
                      id="zafar"
                      name="zafar"
                      checked={zafarChecked}
                      onChange={handleZafarChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="abror" className="ml-5 flex text-black">
                    Abror
                    <input
                      type="checkbox"
                      id="abror"
                      name="abror"
                      checked={abrorChecked}
                      onChange={handleAbrorChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="vohid" className="ml-5 flex text-black">
                    Vohid
                    <input
                      type="checkbox"
                      id="vohid"
                      name="vohid"
                      checked={vohidChecked}
                      onChange={handleVohidChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="otabek" className="ml-5 flex text-black">
                    Otabek
                    <input
                      type="checkbox"
                      id="otabek"
                      name="otabek"
                      checked={otabekChecked}
                      onChange={handleOtabekChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="asror" className="ml-5 flex text-black">
                    Asror
                    <input
                      type="checkbox"
                      id="asror"
                      name="asror"
                      checked={asrorChecked}
                      onChange={handleAsrorChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="atham" className="ml-5 flex text-black">
                    Atham
                    <input
                      type="checkbox"
                      id="atham"
                      name="atham"
                      checked={athamChecked}
                      onChange={handleAthamChange}
                      className="ml-2"
                    />
                  </label>
                  <label htmlFor="elyor" className="ml-5 flex text-black">
                    Elyor
                    <input
                      type="checkbox"
                      id="elyor"
                      name="elyor"
                      checked={elyorChecked}
                      onChange={handleElyorChange}
                      className="ml-2"
                    />
                  </label>

                </div>
              </div>
              <button type="submit" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                {isUpdate ? 'Update' : "Yaratish"}
              </button>
            </form>
          </div>
        )}
        {showMontaj && (
          <div className="overflow-hidden mt-10 p-4 border w-full h-full border-gray-300 rounded-md fixed top-0 left-0 right-0 backdrop-blur-[100px]">
            <button onClick={() => setShowMontaj(false)} className="text-[30px] absolute top-[20px] left-[95%]">
              <IoIosCloseCircleOutline />
            </button>
            <h2 className="text-2xl mb-4 font-[700]">Montaj uchun ma'lumotlar</h2>
            <form onSubmit={handleMontaj}>
              <div>
                <input
                  type="text"
                  placeholder="Bekzod"
                  className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                  value={bekzod}
                  onChange={(e) => setBekzod(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="Siroj"
                  className="block w-[25%] p-2 mb-4 border border-gray-300 rounded-md"
                  value={siroj}
                  onChange={(e) => setSiroj(e.target.value)}
                />
              </div>
              <button type="submit" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Yaratish
              </button>
            </form>
          </div>
        )}
      </div>

      {/* Ekranga chiqarish */}

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-[50px]">
        {box.map((mall) => (
          <div className="border border-black max-w-full max-h-full text-center m-auto rounded-md h-auto mt-6 shadow-lg" key={mall.id}>
            <div className="box p-4">
              <img className="w-full h-64 object-cover rounded-t-md" src={mall.img} alt={mall.title} />
              <p className="mt-6 mb-4 text-[20px] text-blue-500">Zakaz vaqti: {mall.firstData}</p>
              <p className="mt-6 text-[21px] text-green-600 font-semibold">To'yxona haqida: {mall.title}</p>
              <div className="border rounded-[10px] shadow-inner">
                <h2 className="text-[18px] mt-[5px] h-auto">Montajchilar ro'yxati:</h2>
                <p className="text-[18px]">{mall.bekzod}</p>
                <p className="text-[18px] mb-[5px]">{mall.siroj}</p>
                <p className="text-[18px] mb-[5px]">{mall.murod}</p>
              </div>
              <div className="border rounded-[10px] shadow-inner mt-[10px]">
                <h2 className="text-[18px] mt-[5px] h-auto">Video Operator:</h2>
                <p className="text-[18px]">{mall.zafar}</p>
                <p className="text-[18px] mb-[5px]">{mall.abror}</p>
                <p className="text-[18px] mb-[5px]">{mall.vohid}</p>
                <p className="text-[18px]">{mall.otabek}</p>
                <p className="text-[18px] mb-[5px]">{mall.asror}</p>
                <p className="text-[18px] mb-[5px]">{mall.atham}</p>
                <p className="text-[18px] mb-[5px]">{mall.elyor}</p>
              </div>

              <p className="mt-6 mb-4 text-[22px] text-red-500">To'y xaqida ma'lumot:</p>
              <textarea
                value={mall.descript}
                placeholder="Ma'lumotlar"
                className="block w-[90%] p-2 mb-4 border h-[40px] border-gray-300 rounded-md m-auto"
                readOnly
              />
              <p className="mt-6 mb-4 text-[23px] text-blue-500"> Montaj bajarilganmi : <span className="text-green-600 font-[600]">{mall.montaj}</span></p>
              <div className="flex justify-evenly">
                <button className="bg-blue-500 text-white px-4 py-2 rounded-md" onClick={() => handleEdit(mall.id, mall.title, mall.descript, mall.img, mall.montaj, mall.firstData, mall.bekzod, mall.siroj)}>Edit</button>
                <button className="bg-red-500 text-white px-4 py-2 rounded-md" onClick={() => handleDelete(mall.id)}>Delete</button>
              </div>
            </div>
          </div>
        ))}
      </div>

    </>
  );
}

export default Dashboard;


-------------------------------------------------------------------------------------navbar
import { Routes, Route, Link, useNavigate, NavLink } from 'react-router-dom';
import { useState, useContext, useEffect } from 'react';
import { AuthContext } from './context/AuthContext';
import SignUp from './page/SignUp';
import SignIn from './page/SignIn';
import { IoIosCloseCircleOutline } from "react-icons/io";
import { ProtectRouteAdmin } from './protectedRoutes/ProtectRoutAdmin';
import { ProtectRouteUser } from './protectedRoutes/ProtectRoutUser';
import Search from 'antd/es/transfer/search';
import Home from './page/Home';
import Blog from './page/Blog';
import Bekzod from './page/Bekzod';
import Dashboard from './page/Dashboard';
import BossAnaliz from './page/BossAnaliz';
import '../src/index.css'
import {
  Collapse,
  Dropdown,
  initTWE,
} from "tw-elements";
import Workers from './page/Workers';
import Jadval from './page/Jadval';
import DashboardTwo from './page/Dashboard 2';

function App() {
  let user = localStorage.getItem('users');
  const [navbarOpen, setNavbarOpen] = useState(false);
  const { dispatch } = useContext(AuthContext);
  const navigate = useNavigate();
  useEffect(() => {
    initTWE({ Collapse, Dropdown });
  }, []);

  const handleSignOut = () => {
    localStorage.removeItem('users');
    navigate('/signin');
  };



  return (
    <>
      <div className="fixed h-screen w-full top-0 z-[100] backdrop-blur-md">
        <nav
          className=" relative top-10 left-1/2 transform -translate-x-1/2 -translate-y-1/2 backdrop-blur-[500px] flex-no-wrap items-center py-2 shadow-dark-mild  lg:flex-wrap lg:justify-start lg:py-4 rounded-[50px] bg-[#cccaca] flex w-[90%]">
          <div className="flex w-full flex-wrap items-center justify-between px-3">
            <button
              className="block border-0 bg-transparent px-2 text-black/50 hover:no-underline hover:shadow-none focus:no-underline focus:shadow-none focus:outline-none focus:ring-0 dark:text-neutral-200 lg:hidden"
              type="button"
              data-twe-collapse-init
              data-twe-target="#navbarSupportedContent12"
              aria-controls="navbarSupportedContent12"
              aria-expanded="false"
              aria-label="Toggle navigation">
              <span
                className="[&>svg]:w-7 [&>svg]:stroke-black/50 dark:[&>svg]:stroke-neutral-200">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="currentColor">
                  <path
                    fillRule="evenodd"
                    d="M3 6.75A.75.75 0 013.75 6h16.5a.75.75 0 010 1.5H3.75A.75.75 0 013 6.75zM3 12a.75.75 0 01.75-.75h16.5a.75.75 0 010 1.5H3.75A.75.75 0 013 12zm0 5.25a.75.75 0 01.75-.75h16.5a.75.75 0 010 1.5H3.75a.75.75 0 01-.75-.75z"
                    clipRule="evenodd" />
                </svg>
              </span>
            </button>

            <div
              className="!visible hidden flex-grow basis-[100%] items-center lg:!flex lg:basis-auto"
              id="navbarSupportedContent12"
              data-twe-collapse-item>
              <a
                className="mb-4 me-5 ms-2 mt-3 flex items-center lg:mb-0 lg:mt-0"
                href="#">
                <h1 className='grey-qo-regular'>Zilola Media</h1>
              </a>
              <ul
                className="list-style-none me-auto flex flex-col ps-0 lg:flex-row"
                data-twe-navbar-nav-ref>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/home"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Home</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/blog"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Blog</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/signin"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Sign In</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/dashboard"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Dashboard</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/bekzod"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Bekzod</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <NavLink
                    to="/workers"
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Workers</NavLink>
                </li>
                <li className="mb-4 lg:mb-0 lg:pe-2" data-twe-nav-item-ref>
                  <Link
                    to='/signin'
                    onClick={handleSignOut}
                    className="text-black/60 transition duration-200 hover:text-black/80 hover:ease-in-out focus:text-black/80 active:text-black/80 motion-reduce:transition-none dark:text-white/60 dark:hover:text-white/80 dark:focus:text-white/80 dark:active:text-white/80 lg:px-2"
                    href="#"
                    data-twe-nav-link-ref
                  >Sign Out</Link>
                </li>
              </ul>
            </div>

            <div className="relative flex items-center">


              <div
                className="relative"
                data-twe-dropdown-ref
                data-twe-dropdown-alignment="end">
                <a
                  className="me-4 flex items-center text-secondary-500 transition duration-200 hover:text-secondary-600/70 hover:ease-in-out focus:text-secondary-600/70 active:text-secondary-600/70 motion-reduce:transition-none dark:text-secondary-500 dark:hover:text-secondary-500/80 dark:focus:text-secondary-500/80 dark:active:text-secondary-500/80"
                  href="#"
                  id="dropdownMenuButton1"
                  role="button"
                  data-twe-dropdown-toggle-ref
                  aria-expanded="false">
                  <span className="[&>svg]:w-6 ">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="currentColor">
                      <path
                        d="M12 12c2.485 0 4.5-2.015 4.5-4.5S14.485 3 12 3 7.5 5.015 7.5 7.5 9.515 12 12 12z" />
                      <path
                        fillRule="evenodd"
                        d="M4.5 19.5a7.5 7.5 0 0115 0v.75a.75.75 0 01-.75.75h-13.5a.75.75 0 01-.75-.75v-.75z"
                        clipRule="evenodd" />
                    </svg>
                  </span>
                  <span
                    className="absolute -mt-4 ms-2.5 rounded-full bg-danger px-[0.35em] py-[0.15em] text-[0.6rem] font-bold leading-none text-white"
                  ></span>
                </a>
                <ul
                  className="absolute z-[1000] float-left m-0 mt-1 hidden min-w-max list-none rounded-lg border-none bg-white bg-clip-padding text-left text-base shadow-lg dark:bg-surface-dark [&[data-twe-dropdown-show]]:block"
                  aria-labelledby="dropdownMenuButton1"
                  data-twe-dropdown-menu-ref>
                  <li>
                    <a
                      className="block w-full whitespace-nowrap bg-transparent py-2 px-4 text-sm font-normal text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-white/30"
                      href="#">Dashboard</a>
                  </li>
                  <li>
                    <a
                      className="block w-full whitespace-nowrap bg-transparent py-2 px-4 text-sm font-normal text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-white/30"
                      href="#">Another action</a>
                  </li>
                  <li>
                    <a
                      className="block w-full whitespace-nowrap bg-transparent py-2 px-4 text-sm font-normal text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-white/30"
                      href="#">Something else here</a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </nav>
      </div>

      <Routes>
        <Route path="/signin" element={<SignIn />} />
        <Route path="/workers" element={<Workers />} />
        <Route path="/jadval" element={<Jadval />} />
        <Route path="/home" element={<Home />} />

        <Route path="/blog" element={<Blog />} />
        <Route path="/bossanaliz" element={<BossAnaliz />} />
        <Route path='/dashboardtwo' element={<DashboardTwo />} />
        <Route path="/bekzod" element={<Bekzod />} />
        <Route path="/signup" element={<SignUp />} />
        <Route path="/dashboard" element={<ProtectRouteAdmin><Dashboard /></ProtectRouteAdmin>} />
        <Route path="/search" element={<Search />} />
        {/* <Route path="/home" element={<ProtectRouteUser><Home /></ProtectRouteUser>} /> */}
      </Routes>
    </>
  );
}

export default App;